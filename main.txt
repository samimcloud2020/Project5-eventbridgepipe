-------------------part1------------------------------------------------------------
{
"action": "news"
}

trigger Lambda:
lambda call newapi and got json data and sent to AWS Comphrend for sentiment analysis.
and then  put output in dynamodb.

lambda_function.py
---------------------------------
import requests
import json
import datetime
import boto3
from decimal import Decimal

#this lambda grabs today's headlines, does sentiment analysis using AWS Comprehend
#and saves the news along with sentiment into a dynamodb table
def lambda_handler(event, context):
    print("Start News Online Update")
    if event["action"] == "news":
        findnews()
        
    else:
        deletenews()
        
def findnews():
    r = requests.get("https://newsapi.org/v2/top-headlines?country=in&apiKey=1d38501366bf45ad83a296269ac8ce5e")
    if r.status_code == 200:
        data = r.json()
        if data["status"] == "ok":
            for i in data["articles"]:
                Source = i["source"]["name"]
                Title = i["title"]
                Timestamp = i["publishedAt"]
                Content = i["content"]
                sentiment = json.loads(getsentiment(Title)) #Title is string, and send to getsentiment() as string. after getsentiment() returned string , now json.loads() make it dict
                print(type(sentiment)) #dict
                print(sentiment)
                SentimentScore = Decimal(sentiment['SentimentScore']['Mixed'])
                print(type(SentimentScore))
                Negative = Decimal(sentiment['SentimentScore']['Negative'])
                Neutral = Decimal(sentiment['SentimentScore']['Neutral'])
                Positive = Decimal(sentiment['SentimentScore']['Positive'])
                print(SentimentScore)
                putdynamodb(sentiment["Sentiment"],Timestamp,Title,Source,SentimentScore,Negative,Neutral,Positive)
        else:
            print("ERROR")
             
    else:
        print(f"ERROR: {r.status_code}")
    
def getsentiment(Title):
    client = boto3.client('comprehend')
    return(json.dumps(client.detect_sentiment(Text=Title,LanguageCode='en'), sort_keys=True))
    #fired to comprehend and comphrend returned as dict , so json.dumps() make it string and returned string
    
    
def putdynamodb(Sentiment,Timestamp,Title,Source,SentimentScore,Negative,Neutral,Positive):
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table('news')
    response = table.put_item(
    Item={
        'sentiment': Sentiment,
        'timestamp': Timestamp,
        'title': Title,
        'source': Source,
        'SentimentScore': SentimentScore,
        'Negative': Negative,
        'Neutral': Neutral,
        'Positive': Positive
        }
        )
  ---------------------------------------------EVENTBRIDGE----------------------------------------------------------------------------------------------
    SQS---------------->HAVE TWO queue

queue1 (standard)    [standard/FIFO]       <--------------Standard Queue
DLQ    (standard)                          <----------------Dead Letter Queue(If fails, U got in DLQ)
    
Message Body: (sent)
{
    "source": "xxx",
    "sentiment": "NEGATIVE"
}

sqs pattern:
-----------
{
  "messageId": "2e1424d4-f796-459a-8184-9c92662be6da",
  "receiptHandle": "AQEBzWwaftRI0KuVm4tP+/7q1rGgNqicHq...",
  "body": {
    "source": "xxx",
    "sentiment": "NEUTRAL"
  },
  "attributes": {
    "ApproximateReceiveCount": "1",
    "SentTimestamp": "1545082650636",
    "SenderId": "AIDAIENQZJOLO23YVJ4VO",
    "ApproximateFirstReceiveTimestamp": "1545082650649"
  },
  "messageAttributes": {},
  "md5OfBody": "e4e68fb7bd0e697a0ae8f1bb342846b3",
  "eventSource": "aws:sqs",
  "eventSourceARN": "arn:aws:sqs:us-east-2:123456789012:my-queue",
  "awsRegion": "us-east-2"
}

Filter:
-------------------------------------------
{
  "body": {
    "source": [ {"prefix": "xxx"}]
  }
}
------------------Enrichment--------------------------
APIGW: (GET FROM Dynamodb)
PathParameterValues: ["$.body.sentiment"]
----------------------Target---------------------------
sns:
---------------------------------------------------------------------------------------------------------------------------------------
{
  "messageId": "2e1424d4-f796-459a-8184-9c92662be6da",
  "receiptHandle": "AQEBzWwaftRI0KuVm4tP+/7q1rGgNqicHq...",
  "body": {
    "source": "Livemint",
    "sentiment": "NEUTRAL"
  },
  "attributes": {
    "ApproximateReceiveCount": "1",
    "SentTimestamp": "1545082650636",
    "SenderId": "AIDAIENQZJOLO23YVJ4VO",
    "ApproximateFirstReceiveTimestamp": "1545082650649"
  },
  "messageAttributes": {},
  "md5OfBody": "e4e68fb7bd0e697a0ae8f1bb342846b3",
  "eventSource": "aws:sqs",
  "eventSourceARN": "arn:aws:sqs:us-east-2:123456789012:my-queue",
  "awsRegion": "us-east-2"
}


filter:
{
  "body": {
    "source": [ {"prefix": "Livemint"} ]
  }
}

apigw:

"$.body.sentiment"

test from sqs:
{
    "source": "Livemint",
    "sentiment": "NEUTRAL"
  }
--------------------------------------------------------------------------------
                
                


    
